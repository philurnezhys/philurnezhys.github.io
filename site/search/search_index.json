{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Info"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"course/final/","text":"","title":"\u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435"},{"location":"course/intro/","text":"\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0412 \u0442\u0435\u0447\u0435\u043d\u0438\u0435 \u043a\u0443\u0440\u0441\u0430 \"\u0421\u0440\u0435\u0434\u0441\u0442\u0432\u0430 \u0432\u0435\u0431-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\" \u0431\u044b\u043b \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0438\u0441 \u0434\u043b\u044f \u0440\u0435\u043a\u043b\u0430\u043c\u043d\u043e\u0433\u043e \u0430\u0433\u0435\u043d\u0441\u0442\u0432\u0430 \u0434\u043b\u044f \u0443\u0447\u0451\u0442\u0430 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c\u0438. \u0414\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0440\u044f\u043c\u044b\u043c \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0435\u043d\u0438\u0435\u043c 3-4 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0445 \u0440\u0430\u0431\u043e\u0442 \u043e\u0441\u0435\u043d\u043d\u0435\u0433\u043e \u0441\u0435\u043c\u0435\u0441\u0442\u0440\u0430 2021-22 (\u0432 \u043c\u043e\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435 2020-21) \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0430 \"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\". \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Django REST Framework , \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f - \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Vue.js (Vuetify) .","title":"\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435"},{"location":"course/intro/#_1","text":"\u0412 \u0442\u0435\u0447\u0435\u043d\u0438\u0435 \u043a\u0443\u0440\u0441\u0430 \"\u0421\u0440\u0435\u0434\u0441\u0442\u0432\u0430 \u0432\u0435\u0431-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\" \u0431\u044b\u043b \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0438\u0441 \u0434\u043b\u044f \u0440\u0435\u043a\u043b\u0430\u043c\u043d\u043e\u0433\u043e \u0430\u0433\u0435\u043d\u0441\u0442\u0432\u0430 \u0434\u043b\u044f \u0443\u0447\u0451\u0442\u0430 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c\u0438. \u0414\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0440\u044f\u043c\u044b\u043c \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0435\u043d\u0438\u0435\u043c 3-4 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0445 \u0440\u0430\u0431\u043e\u0442 \u043e\u0441\u0435\u043d\u043d\u0435\u0433\u043e \u0441\u0435\u043c\u0435\u0441\u0442\u0440\u0430 2021-22 (\u0432 \u043c\u043e\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435 2020-21) \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0430 \"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\". \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Django REST Framework , \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f - \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Vue.js (Vuetify) .","title":"\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435"},{"location":"course/project/","text":"\u0426\u0435\u043b\u044c \u0438 \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0426\u0435\u043b\u044c : \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0438\u0441\u0430 \"\u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f\" \u0417\u0430\u0434\u0430\u0447\u0438 : \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 Django \u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u043e\u0432 \u0438 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u043e\u0432 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c Django REST Framework \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f CRUD-\u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u043d\u0430\u0434 \u0442\u0430\u0431\u043b\u0438\u0446\u0430\u043c\u0438 (backend) \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0441\u0430\u0439\u0442\u043e\u043c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Vue.js (Vuetify) (frontend) \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0442\u0435\u0441\u0442\u043e\u0432 \u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u0438, backend \u0438 frontend \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0447\u0435\u0442\u0430 \u043f\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0443 \u0432 \u0432\u0438\u0434\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 mkdocs","title":"\u0426\u0435\u043b\u0438 \u0438 \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430"},{"location":"course/project/#_1","text":"\u0426\u0435\u043b\u044c : \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0438\u0441\u0430 \"\u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f\" \u0417\u0430\u0434\u0430\u0447\u0438 : \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 Django \u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u043e\u0432 \u0438 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u043e\u0432 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c Django REST Framework \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f CRUD-\u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u043d\u0430\u0434 \u0442\u0430\u0431\u043b\u0438\u0446\u0430\u043c\u0438 (backend) \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0441\u0430\u0439\u0442\u043e\u043c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Vue.js (Vuetify) (frontend) \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0442\u0435\u0441\u0442\u043e\u0432 \u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u0438, backend \u0438 frontend \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0447\u0435\u0442\u0430 \u043f\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0443 \u0432 \u0432\u0438\u0434\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 mkdocs","title":"\u0426\u0435\u043b\u044c  \u0438 \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430"},{"location":"course/title/","text":"\u041c\u0418\u041d\u0418\u0421\u0422\u0415\u0420\u0421\u0422\u0412\u041e \u041e\u0411\u0420\u0410\u0417\u041e\u0412\u0410\u041d\u0418\u042f \u0418 \u041d\u0410\u0423\u041a\u0418 \u0421\u0410\u041d\u041a\u0422-\u041f\u0415\u0422\u0415\u0420\u0411\u0423\u0420\u0413\u0421\u041a\u0418\u0419 \u041d\u0410\u0426\u0418\u041e\u041d\u0410\u041b\u042c\u041d\u042b\u0419 \u0418\u0421\u0421\u041b\u0415\u0414\u041e\u0412\u0410\u0422\u0415\u041b\u042c\u0421\u041a\u0418\u0419 \u0423\u041d\u0418\u0412\u0415\u0420\u0421\u0418\u0422\u0415\u0422 \u0418\u041d\u0424\u041e\u0420\u041c\u0410\u0426\u0418\u041e\u041d\u041d\u042b\u0425 \u0422\u0415\u0425\u041d\u041e\u041b\u041e\u0413\u0418\u0419, \u041c\u0415\u0425\u0410\u041d\u0418\u041a\u0418 \u0418 \u041e\u041f\u0422\u0418\u041a\u0418 \u0424\u0410\u041a\u0423\u041b\u042c\u0422\u0415\u0422 \u0418\u041d\u0424\u041e\u041a\u041e\u041c\u041c\u0423\u041d\u0418\u041a\u0410\u0426\u0418\u041e\u041d\u041d\u042b\u0425 \u0422\u0415\u0425\u041d\u041e\u041b\u041e\u0413\u0418\u0419 \u041a\u0443\u0440\u0441\u043e\u0432\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442 \u043d\u0430 \u0442\u0435\u043c\u0443 \u00ab\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0441\u0435\u0440\u0432\u0438\u0441\u0430 \u0440\u0435\u043a\u043b\u0430\u043c\u043d\u043e\u0433\u043e \u0430\u0433\u0435\u043d\u0441\u0442\u0432\u0430 \u0434\u043b\u044f \u0443\u0447\u0451\u0442\u0430 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c\u0438\u00bb \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u00ab\u0421\u0440\u0435\u0434\u0441\u0442\u0432\u0430 \u0432\u0435\u0431-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\u00bb \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u043b \u0423\u0440\u043d\u0435\u0436\u0443\u0441 \u0424. \u0433\u0440\u0443\u043f\u043f\u0430 \u041a34422 \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043b \u0413\u043e\u0432\u043e\u0440\u043e\u0432 \u0410. \u0418. \u0421\u0430\u043d\u043a\u0442-\u041f\u0435\u0442\u0435\u0440\u0431\u0443\u0440\u0433 2022","title":"\u0422\u0438\u0442\u0443\u043b\u044c\u043d\u044b\u0439 \u043b\u0438\u0441\u0442"},{"location":"labs/lab1/containerization/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c Dockerfile \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0431\u044d\u043a\u0435\u043d\u0434 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0438\u0437 \u043a\u0443\u0440\u0441\u0430 \"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\". \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f: \u0418\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u0411\u0414 Django \u0417\u0430\u0439\u0442\u0438 \u0432 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438 (https://www.mousedc.ru/learning/565-komanda-docker-konteyner/) Backend FROM python:3.9 WORKDIR /app ENV PYTHONDONTWRITEBYTECODE 1 ENV PYTHONUNBUFFERED 1 RUN apt update && apt install -y postgresql gcc python3 musl-dev RUN pip install --upgrade pip COPY ./requirements.txt . RUN pip install -r requirements.txt COPY . /app CMD [\"python\", \"manage.py\", \"runserver\", \"0.0.0.0:8000\" ] Frontend FROM node:12 RUN apt-get update && apt-get upgrade -y && apt-get autoclean RUN mkdir /front WORKDIR /front COPY package*.json ./ RUN npm install RUN npm install -g @vue/cli COPY . . CMD [\"npm\", \"run\", \"serve\"] \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u043c \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u041f\u0440\u0438\u043c\u0435\u043d\u0438\u043c \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438","title":"1.1 Containerization"},{"location":"labs/lab1/containerization/#_1","text":"\u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c Dockerfile \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0431\u044d\u043a\u0435\u043d\u0434 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0438\u0437 \u043a\u0443\u0440\u0441\u0430 \"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\". \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f: \u0418\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u0411\u0414 Django \u0417\u0430\u0439\u0442\u0438 \u0432 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438 (https://www.mousedc.ru/learning/565-komanda-docker-konteyner/)","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435:"},{"location":"labs/lab1/containerization/#backend","text":"FROM python:3.9 WORKDIR /app ENV PYTHONDONTWRITEBYTECODE 1 ENV PYTHONUNBUFFERED 1 RUN apt update && apt install -y postgresql gcc python3 musl-dev RUN pip install --upgrade pip COPY ./requirements.txt . RUN pip install -r requirements.txt COPY . /app CMD [\"python\", \"manage.py\", \"runserver\", \"0.0.0.0:8000\" ]","title":"Backend"},{"location":"labs/lab1/containerization/#frontend","text":"FROM node:12 RUN apt-get update && apt-get upgrade -y && apt-get autoclean RUN mkdir /front WORKDIR /front COPY package*.json ./ RUN npm install RUN npm install -g @vue/cli COPY . . CMD [\"npm\", \"run\", \"serve\"] \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u043c \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u041f\u0440\u0438\u043c\u0435\u043d\u0438\u043c \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438","title":"Frontend"},{"location":"labs/lab1/orchestration/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u0432 \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u0435 \u0432\u0441\u0435\u0445 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 \u0438\u0437 3 \u0438 4 \u0440\u0430\u0431\u043e\u0442\u044b \u0438\u0437 \u043a\u0443\u0440\u0441\u0430 \"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\". \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0411\u0414 Postgres. \u0421 \u043f\u043e\u043f\u043e\u0449\u044c\u044e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043a \u0411\u0414 \u0438\u0437 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0411\u0414 (Valentina DB). docker-compose.yml version: '3.10' services: backend: build: ./ad_agency/ command: bash -c \" python3 manage.py makemigrations && python3 manage.py migrate && python3 manage.py runserver 0.0.0.0:8000\"; volumes: - ./ad_agency/:/app/ ports: - 8000:8000 env_file: - ./ad_agency/.env.dev depends_on: - db frontend: build: ./ad_agency_vue/ ports: - 80:8080 depends_on: - backend db: image: postgres:14.0 volumes: - postgres_data:/var/lib/postgresql/data/ environment: - POSTGRES_USER=postgres - POSTGRES_PASSWORD=1602 - POSTGRES_DB=hotel_db ports: - 3333:5432 volumes: postgres_data: \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0411\u0414 Postgres. \u0414\u043e\u0441\u0442\u0443\u043f \u043a \u0411\u0414 \u043f\u043e\u043b\u0443\u0447\u0435\u043d: \u0412\u0441\u0435 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0432 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0435","title":"1.2 Orchestration"},{"location":"labs/lab1/orchestration/#_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u0432 \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u0435 \u0432\u0441\u0435\u0445 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 \u0438\u0437 3 \u0438 4 \u0440\u0430\u0431\u043e\u0442\u044b \u0438\u0437 \u043a\u0443\u0440\u0441\u0430 \"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\". \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043a\u043e\u043c\u0430\u043d\u0434\u044b \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0411\u0414 Postgres. \u0421 \u043f\u043e\u043f\u043e\u0449\u044c\u044e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043a \u0411\u0414 \u0438\u0437 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0411\u0414 (Valentina DB).","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435:"},{"location":"labs/lab1/orchestration/#docker-composeyml","text":"version: '3.10' services: backend: build: ./ad_agency/ command: bash -c \" python3 manage.py makemigrations && python3 manage.py migrate && python3 manage.py runserver 0.0.0.0:8000\"; volumes: - ./ad_agency/:/app/ ports: - 8000:8000 env_file: - ./ad_agency/.env.dev depends_on: - db frontend: build: ./ad_agency_vue/ ports: - 80:8080 depends_on: - backend db: image: postgres:14.0 volumes: - postgres_data:/var/lib/postgresql/data/ environment: - POSTGRES_USER=postgres - POSTGRES_PASSWORD=1602 - POSTGRES_DB=hotel_db ports: - 3333:5432 volumes: postgres_data: \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0411\u0414 Postgres. \u0414\u043e\u0441\u0442\u0443\u043f \u043a \u0411\u0414 \u043f\u043e\u043b\u0443\u0447\u0435\u043d: \u0412\u0441\u0435 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0432 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0435","title":"docker-compose.yml"},{"location":"labs/lab2/auto_filters/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2.1.2 \u0420\u0435\u0430\u043b\u0438\u0437\u0432\u0430\u0442\u044c \u0432 \u0440\u0443\u0447\u043d\u0443\u044e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b (\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 django-filters: \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u043e \u0434\u0430\u0442\u0435, \u043f\u043e\u0438\u0441\u043a, \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u043f\u043e\u043b\u044f\u043c \u0438\u0437 \u0441\u0432\u044f\u0437\u043d\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u0446\u0435\u043d, \u0434\u0430\u0442 \u0438\u043b\u0438 \u043a\u0430\u043a\u0438\u0445-\u043b\u0438\u0431\u043e \u0434\u0440\u0443\u0433\u0438\u0445 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0440\u0430\u0431\u043e\u0447\u0438\u0445 \u0433\u0440\u0443\u043f\u043f \u043f\u043e \u0434\u0430\u0442\u0435 \u043d\u0430\u0447\u0430\u043b\u0430 \u0440\u0430\u0431\u043e\u0442\u044b views.py class WorkGroupFilterView(generics.ListAPIView): queryset = WorkGroup.objects.all() serializer_class = WorkGroupViewSerializer filter_backends = [DjangoFilterBackend] filterset_fields = ['start_date'] \u041f\u043e\u0438\u0441\u043a \u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044f \u043f\u043e \u0438\u043c\u0435\u043d\u0438 \u0438 \u043d\u043e\u043c\u0435\u0440\u0443 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430 views.py class ExecutorSearchFilterView(generics.ListAPIView): queryset = Executor.objects.all() serializer_class = ExecutorViewSerializer filter_backends = [DjangoFilterBackend, SearchFilter] search_fields = ['full_name', 'phone_num'] \u041f\u043e\u0438\u0441\u043a \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u044f\u0432\u043a\u0435 views.py class InvoiceSearchFilterView(generics.ListAPIView): queryset = Invoice.objects.all() serializer_class = InvoiceViewSerializer filter_backends = [DjangoFilterBackend, SearchFilter] search_fields = ['client__contact_person'] \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432 views.py class ChosenMaterialsRangeFilterView(generics.ListAPIView): queryset = ChosenMaterials.objects.all() serializer_class = ChosenMaterialsViewSerializer filter_backends = [filters.DjangoFilterBackend] filterset_class = ChosenMaterialsRangeFilter filters.py from django_filters import rest_framework as filters from .models import * class ChosenMaterialsRangeFilter(filters.FilterSet): amount = filters.RangeFilter() ordering = filters.OrderingFilter(fields=(('amount'),)) class Meta: model = ChosenMaterials fields = ['amount']","title":"2.1.2 Auto filters"},{"location":"labs/lab2/auto_filters/#212","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u0432\u0430\u0442\u044c \u0432 \u0440\u0443\u0447\u043d\u0443\u044e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b (\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 django-filters: \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u043e \u0434\u0430\u0442\u0435, \u043f\u043e\u0438\u0441\u043a, \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u043f\u043e\u043b\u044f\u043c \u0438\u0437 \u0441\u0432\u044f\u0437\u043d\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u0446\u0435\u043d, \u0434\u0430\u0442 \u0438\u043b\u0438 \u043a\u0430\u043a\u0438\u0445-\u043b\u0438\u0431\u043e \u0434\u0440\u0443\u0433\u0438\u0445 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2.1.2"},{"location":"labs/lab2/auto_filters/#_1","text":"","title":"\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0440\u0430\u0431\u043e\u0447\u0438\u0445 \u0433\u0440\u0443\u043f\u043f \u043f\u043e \u0434\u0430\u0442\u0435 \u043d\u0430\u0447\u0430\u043b\u0430 \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"labs/lab2/auto_filters/#viewspy","text":"class WorkGroupFilterView(generics.ListAPIView): queryset = WorkGroup.objects.all() serializer_class = WorkGroupViewSerializer filter_backends = [DjangoFilterBackend] filterset_fields = ['start_date']","title":"views.py"},{"location":"labs/lab2/auto_filters/#_2","text":"","title":"\u041f\u043e\u0438\u0441\u043a \u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044f \u043f\u043e \u0438\u043c\u0435\u043d\u0438 \u0438 \u043d\u043e\u043c\u0435\u0440\u0443 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430"},{"location":"labs/lab2/auto_filters/#viewspy_1","text":"class ExecutorSearchFilterView(generics.ListAPIView): queryset = Executor.objects.all() serializer_class = ExecutorViewSerializer filter_backends = [DjangoFilterBackend, SearchFilter] search_fields = ['full_name', 'phone_num']","title":"views.py"},{"location":"labs/lab2/auto_filters/#_3","text":"","title":"\u041f\u043e\u0438\u0441\u043a \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u044f\u0432\u043a\u0435"},{"location":"labs/lab2/auto_filters/#viewspy_2","text":"class InvoiceSearchFilterView(generics.ListAPIView): queryset = Invoice.objects.all() serializer_class = InvoiceViewSerializer filter_backends = [DjangoFilterBackend, SearchFilter] search_fields = ['client__contact_person']","title":"views.py"},{"location":"labs/lab2/auto_filters/#_4","text":"","title":"\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u043e\u0432"},{"location":"labs/lab2/auto_filters/#viewspy_3","text":"class ChosenMaterialsRangeFilterView(generics.ListAPIView): queryset = ChosenMaterials.objects.all() serializer_class = ChosenMaterialsViewSerializer filter_backends = [filters.DjangoFilterBackend] filterset_class = ChosenMaterialsRangeFilter","title":"views.py"},{"location":"labs/lab2/auto_filters/#filterspy","text":"from django_filters import rest_framework as filters from .models import * class ChosenMaterialsRangeFilter(filters.FilterSet): amount = filters.RangeFilter() ordering = filters.OrderingFilter(fields=(('amount'),)) class Meta: model = ChosenMaterials fields = ['amount']","title":"filters.py"},{"location":"labs/lab2/custom_pagination/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2.2.2 \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u043c\u0435\u0442\u043e\u0434 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0439, \u043a\u0440\u043e\u043c\u0435 \u043e\u0431\u044b\u0447\u043d\u043e\u0433\u043e \u0432\u044b\u0432\u043e\u0434\u0430 \u0432\u0435\u0440\u043d\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0438 \u0438 \u043d\u043e\u043c\u0435\u0440 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u041a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0438: pagination.py from rest_framework import pagination from rest_framework.response import Response class CustomPagination(pagination.PageNumberPagination): def get_paginated_response(self, data): return Response({ 'page': self.page.number, 'number_of_pages': self.page.paginator.num_pages, 'results': data, 'links': { 'next': self.get_next_link(), 'previous': self.get_previous_link() }, })","title":"2.2.2 Custom pagination"},{"location":"labs/lab2/custom_pagination/#222","text":"\u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u043c\u0435\u0442\u043e\u0434 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0439, \u043a\u0440\u043e\u043c\u0435 \u043e\u0431\u044b\u0447\u043d\u043e\u0433\u043e \u0432\u044b\u0432\u043e\u0434\u0430 \u0432\u0435\u0440\u043d\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0438 \u0438 \u043d\u043e\u043c\u0435\u0440 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2.2.2"},{"location":"labs/lab2/custom_pagination/#_1","text":"pagination.py from rest_framework import pagination from rest_framework.response import Response class CustomPagination(pagination.PageNumberPagination): def get_paginated_response(self, data): return Response({ 'page': self.page.number, 'number_of_pages': self.page.paginator.num_pages, 'results': data, 'links': { 'next': self.get_next_link(), 'previous': self.get_previous_link() }, })","title":"\u041a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0438:"},{"location":"labs/lab2/default_pagination/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2.2.1 \u041d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044e \u0434\u043b\u044f \u043b\u044e\u0431\u044b\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u0432 \u0412\u0430\u0448\u0435\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0435. \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0443\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e: 'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'], 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination', 'PAGE_SIZE': 3","title":"2.2.1 Default Pagination"},{"location":"labs/lab2/default_pagination/#221","text":"\u041d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044e \u0434\u043b\u044f \u043b\u044e\u0431\u044b\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u0432 \u0412\u0430\u0448\u0435\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0435.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2.2.1"},{"location":"labs/lab2/default_pagination/#_1","text":"'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'], 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination', 'PAGE_SIZE': 3","title":"\u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0443\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e:"},{"location":"labs/lab2/file_upload/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2.3.1 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0435\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b: \u0415\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0444\u0430\u0439\u043b\u043e\u0432, \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u0432\u043d\u0435\u0448\u043d\u0435\u0433\u043e \u043a\u043b\u044e\u0447\u0430 \u043d\u0430 \u0441\u0432\u044f\u0437\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0438\u043c\u0435\u043d\u0438 \u0438 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0444\u0430\u0439\u043b\u0430 \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. \u0415\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0434\u043b\u044f \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0444\u0430\u0439\u043b\u043e\u0432 \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u043d\u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u0444\u0430\u0439\u043b\u0430 \u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044f \u0444\u0430\u0439\u043b\u043e\u0432. \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430 models.py def get_upload_path(instance, filename): return 'images/{0}/{1}'.format(instance.material, filename) class MaterialsPhoto(models.Model): material = models.ForeignKey('MaterialsPL', on_delete=models.CASCADE, verbose_name='\u041c\u0430\u0442\u0435\u0440\u0438\u0430\u043b') filename = models.CharField(max_length=50, verbose_name='\u0418\u043c\u044f \u0444\u0430\u0439\u043b\u0430') size = models.IntegerField(verbose_name='\u0420\u0430\u0437\u043c\u0435\u0440 \u0444\u0430\u0439\u043b\u0430') file = models.FileField(validators=[validate_file_size, validate_file_type], upload_to=get_upload_path) def save(self, *args, **kwargs): self.size = self.file.size self.filename = self.file.name super(MaterialsPhoto, self).save(*args, **kwargs) validators.py from django.core.exceptions import ValidationError import magic def validate_file_size(file_upload): if file_upload.size > 1024 * 1024: raise ValidationError('\u0424\u0430\u0439\u043b \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0431\u043e\u043b\u044c\u0448\u043e\u0439.') def validate_file_type(file_upload): file_type = magic.from_buffer(file_upload.read(), mime=True) if file_type not in ('image/png', 'image/jpeg', 'image/jpg'): raise ValidationError('\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u0435, \u043f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0443 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 PNG \u0438\u043b\u0438 JPG.') serializer.py class MaterialsPhotoSerializer(serializers.ModelSerializer): class Meta: model = MaterialsPhoto fields = ['material', 'file'] views.py class MaterialsPhotoAPIView(generics.CreateAPIView): queryset = MaterialsPhoto.objects.all() serializer_class = MaterialsPhotoSerializer \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0432\u0443\u0445 \u0444\u0430\u0439\u043b\u043e\u0432 views.py class MaterialsPhotosAPIView(generics.CreateAPIView): queryset = MaterialsPhoto.objects.all() serializer_class = MaterialsPhotoSerializer def post(self, request, *args, **kwargs): files = request.FILES.getlist('file') for file in files: file_instance = MaterialsPhoto(material=MaterialsPL.objects.get( id=request.POST.get('material')), file=file) file_instance.save() return Response(request.data, status=status.HTTP_201_CREATED)","title":"2.3.1 File upload & validation"},{"location":"labs/lab2/file_upload/#231","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0435\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b: \u0415\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0444\u0430\u0439\u043b\u043e\u0432, \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u0432\u043d\u0435\u0448\u043d\u0435\u0433\u043e \u043a\u043b\u044e\u0447\u0430 \u043d\u0430 \u0441\u0432\u044f\u0437\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0438\u043c\u0435\u043d\u0438 \u0438 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0444\u0430\u0439\u043b\u0430 \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445. \u0415\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0434\u043b\u044f \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0444\u0430\u0439\u043b\u043e\u0432 \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u043d\u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u0444\u0430\u0439\u043b\u0430 \u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044f \u0444\u0430\u0439\u043b\u043e\u0432.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2.3.1"},{"location":"labs/lab2/file_upload/#_1","text":"models.py def get_upload_path(instance, filename): return 'images/{0}/{1}'.format(instance.material, filename) class MaterialsPhoto(models.Model): material = models.ForeignKey('MaterialsPL', on_delete=models.CASCADE, verbose_name='\u041c\u0430\u0442\u0435\u0440\u0438\u0430\u043b') filename = models.CharField(max_length=50, verbose_name='\u0418\u043c\u044f \u0444\u0430\u0439\u043b\u0430') size = models.IntegerField(verbose_name='\u0420\u0430\u0437\u043c\u0435\u0440 \u0444\u0430\u0439\u043b\u0430') file = models.FileField(validators=[validate_file_size, validate_file_type], upload_to=get_upload_path) def save(self, *args, **kwargs): self.size = self.file.size self.filename = self.file.name super(MaterialsPhoto, self).save(*args, **kwargs) validators.py from django.core.exceptions import ValidationError import magic def validate_file_size(file_upload): if file_upload.size > 1024 * 1024: raise ValidationError('\u0424\u0430\u0439\u043b \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0431\u043e\u043b\u044c\u0448\u043e\u0439.') def validate_file_type(file_upload): file_type = magic.from_buffer(file_upload.read(), mime=True) if file_type not in ('image/png', 'image/jpeg', 'image/jpg'): raise ValidationError('\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u0435, \u043f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0443 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 PNG \u0438\u043b\u0438 JPG.') serializer.py class MaterialsPhotoSerializer(serializers.ModelSerializer): class Meta: model = MaterialsPhoto fields = ['material', 'file'] views.py class MaterialsPhotoAPIView(generics.CreateAPIView): queryset = MaterialsPhoto.objects.all() serializer_class = MaterialsPhotoSerializer","title":"\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430"},{"location":"labs/lab2/file_upload/#_2","text":"views.py class MaterialsPhotosAPIView(generics.CreateAPIView): queryset = MaterialsPhoto.objects.all() serializer_class = MaterialsPhotoSerializer def post(self, request, *args, **kwargs): files = request.FILES.getlist('file') for file in files: file_instance = MaterialsPhoto(material=MaterialsPL.objects.get( id=request.POST.get('material')), file=file) file_instance.save() return Response(request.data, status=status.HTTP_201_CREATED)","title":"\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0432\u0443\u0445 \u0444\u0430\u0439\u043b\u043e\u0432"},{"location":"labs/lab2/manual_filters/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2.1.1 \u0420\u0435\u0430\u043b\u0438\u0437\u0432\u0430\u0442\u044c \u0432 \u0440\u0443\u0447\u043d\u0443\u044e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b (\u0432 \u0440\u0443\u0447\u043d\u0443\u044e \u0437\u043d\u0430\u0447\u0438\u0442, \u0447\u0442\u043e \u0412\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0432 url \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u0434\u0430\u043b\u0435\u0435 \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0442\u044c \u043c\u0435\u0442\u043e\u0434 list \u0438\u043b\u0438 get_queryset, c \u0446\u0435\u043b\u044c\u044e \u0432\u0437\u044f\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0438\u0437 url-\u0430\u0434\u0440\u0435\u0441\u0430, \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441 \u043d\u0438\u043c\u0438 \u0437\u0430\u043f\u0440\u043e\u0441 \u0438 \u0432\u0435\u0440\u043d\u0443\u0442\u044c responce \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e): \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0438\u0437 url-\u0430\u0434\u0440\u0435\u0441\u0430 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435. (GET, ListAPIView) views.py class ClientFilterView(generics.ListAPIView): serializer_class = ClientViewSerializer pagination_class = CustomPagination def get_queryset(self): queryset = Client.objects.all() legal_entity = self.request.query_params.get('legal_entity') if legal_entity: queryset = queryset.filter(legal_entity=legal_entity) return queryset \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 2 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0438\u0437 url-\u0430\u0434\u0440\u0435\u0441\u0430 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435. (GET, ListAPIView) views.py class ServicesPLFilterView(generics.ListAPIView): serializer_class = ServicesPLViewSerializer def get_queryset(self): queryset = ServicesPL.objects.all() service_type = self.request.query_params.get('service_type') price = self.request.query_params.get('price') if service_type: queryset = queryset.filter(service_type=service_type) if price: queryset = queryset.filter(price=price) return queryset \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 2 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0438\u0437 url-\u0430\u0434\u0440\u0435\u0441\u0430 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u0435\u0441\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d \u0438 \u043d\u0435\u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435, \u0435\u0441\u043b\u0438 \u043d\u0435 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d. (GET, ListAPIView) views.py class RequestFilterView(generics.ListAPIView): serializer_class = RequestViewSerializer def get_queryset(self): queryset = Request.objects.all() if self.request.user.is_authenticated: status = self.request.query_params.get('status') final_price = self.request.query_params.get('final_price') if status: queryset = queryset.filter(status=status) if final_price: queryset = queryset.filter(final_price=final_price) return queryset","title":"2.1.1 Manual filters"},{"location":"labs/lab2/manual_filters/#211","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u0432\u0430\u0442\u044c \u0432 \u0440\u0443\u0447\u043d\u0443\u044e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b (\u0432 \u0440\u0443\u0447\u043d\u0443\u044e \u0437\u043d\u0430\u0447\u0438\u0442, \u0447\u0442\u043e \u0412\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0432 url \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u0434\u0430\u043b\u0435\u0435 \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0442\u044c \u043c\u0435\u0442\u043e\u0434 list \u0438\u043b\u0438 get_queryset, c \u0446\u0435\u043b\u044c\u044e \u0432\u0437\u044f\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0438\u0437 url-\u0430\u0434\u0440\u0435\u0441\u0430, \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441 \u043d\u0438\u043c\u0438 \u0437\u0430\u043f\u0440\u043e\u0441 \u0438 \u0432\u0435\u0440\u043d\u0443\u0442\u044c responce \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e): \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0438\u0437 url-\u0430\u0434\u0440\u0435\u0441\u0430 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435. (GET, ListAPIView)","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2.1.1"},{"location":"labs/lab2/manual_filters/#viewspy","text":"class ClientFilterView(generics.ListAPIView): serializer_class = ClientViewSerializer pagination_class = CustomPagination def get_queryset(self): queryset = Client.objects.all() legal_entity = self.request.query_params.get('legal_entity') if legal_entity: queryset = queryset.filter(legal_entity=legal_entity) return queryset \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 2 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0438\u0437 url-\u0430\u0434\u0440\u0435\u0441\u0430 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435. (GET, ListAPIView)","title":"views.py"},{"location":"labs/lab2/manual_filters/#viewspy_1","text":"class ServicesPLFilterView(generics.ListAPIView): serializer_class = ServicesPLViewSerializer def get_queryset(self): queryset = ServicesPL.objects.all() service_type = self.request.query_params.get('service_type') price = self.request.query_params.get('price') if service_type: queryset = queryset.filter(service_type=service_type) if price: queryset = queryset.filter(price=price) return queryset \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 2 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0438\u0437 url-\u0430\u0434\u0440\u0435\u0441\u0430 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u0435\u0441\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d \u0438 \u043d\u0435\u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435, \u0435\u0441\u043b\u0438 \u043d\u0435 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d. (GET, ListAPIView)","title":"views.py"},{"location":"labs/lab2/manual_filters/#viewspy_2","text":"class RequestFilterView(generics.ListAPIView): serializer_class = RequestViewSerializer def get_queryset(self): queryset = Request.objects.all() if self.request.user.is_authenticated: status = self.request.query_params.get('status') final_price = self.request.query_params.get('final_price') if status: queryset = queryset.filter(status=status) if final_price: queryset = queryset.filter(final_price=final_price) return queryset","title":"views.py"},{"location":"labs/lab2/signals/","text":"","title":"2.4.1 Signals"},{"location":"labs/lab3/tests/","text":"tests.py from django.test import TestCase from django.urls import reverse from rest_framework import status from .models import * # Create your tests here. # \u0422\u0435\u0441\u0442 \u043c\u043e\u0434\u0435\u043b\u0438 API (3 \u0442\u0430\u0431\u043b\u0438\u0446\u044b) class ClientModelTest(TestCase): @classmethod def setUpTestData(cls): Client.objects.create( id=1, legal_entity='ITMO', contact_person='ITMO', phone_num='88005553535', email='itmo@itmo.ru', bank_details='5500745688881024') def test_client_label(self): client_test = Client.objects.get(id=1) field_label = client_test._meta.get_field('legal_entity').verbose_name self.assertEquals(field_label, '\u042e\u0440\u0438\u0434\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043b\u0438\u0446\u043e') class MaterialsPLModelTest(TestCase): @classmethod def setUpTestData(cls): MaterialsPL.objects.create( id=1, title='Craft Paper', description='Eco paper', price=250) def test_object_name_is_name(self): material = MaterialsPL.objects.get(id=1) expected_object_name = str(material.title) self.assertEquals(expected_object_name, str(material)) class ExecutorModelTest(TestCase): @classmethod def setUpTestData(cls): Executor.objects.create( id=1, full_name='Filips Urnezhus', phone_num='89817623066') def test_full_name_max_length(self): executor = Executor.objects.get(id=1) max_length = executor._meta.get_field('full_name').max_length self.assertEquals(max_length, 50) # \u0422\u0435\u0441\u0442 \u043c\u043e\u0434\u0435\u043b\u0438 API (3 GET \u0437\u0430\u043f\u0440\u043e\u0441\u0430, 3 POST \u0437\u0430\u043f\u0440\u043e\u0441\u0430, 3 PATCH \u0437\u0430\u043f\u0440\u043e\u0441\u0430) # GET \u0417\u0430\u043f\u0440\u043e\u0441\u044b class ClientGetTest(TestCase): @classmethod def setUpTestData(cls): Client.objects.create( id=1, legal_entity='ITMO', contact_person='ITMO', phone_num='88005553535', email='itmo@itmo.ru', bank_details='5500745688881024') def test_get_service(self): url = reverse('ad_agency:client', args=['1']) data = { 'id': 1, 'legal_entity': 'ITMO', 'contact_person': 'ITMO', 'phone_num': '88005553535', 'email': 'itmo@itmo.ru', 'bank_details': '5500745688881024'} response = self.client.get(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data) class MaterialsPLGetTest(TestCase): @classmethod def setUpTestData(cls): MaterialsPL.objects.create( id=1, title='Craft Paper', description='Eco paper', price=250) def test_get_material(self): url = reverse('ad_agency:material', args=['1']) data = { 'id': 1, 'title': 'Craft Paper', 'description': 'Eco paper', 'price': '250'} response = self.client.get(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data) class ExecutorGetTest(TestCase): @classmethod def setUpTestData(cls): Executor.objects.create( id=1, full_name='Filips Urnezhus', phone_num='89817623066') def test_get_executor(self): url = reverse('ad_agency:executor', args=['1']) data = { 'id': 1, 'full_name': 'Filips Urnezhus', 'phone_num': '89817623066'} response = self.client.get(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data) # POST \u0417\u0430\u043f\u0440\u043e\u0441\u044b class ClientCreateTest(TestCase): def test_create_client(self): url = reverse('ad_agency:client-create') data = {'legal_entity': 'Polytech', 'contact_person': 'Polina', 'phone_num': '88124503737', 'email': 'poly@polytech.ru', 'bank_details': '5512745688881024'} response = self.client.post(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(response.json(), data) class MaterialsPLCreateTest(TestCase): def test_create_material(self): url = reverse('ad_agency:material-create') data = {'title': 'Bargain Paper', 'description': 'Paper', 'price': '150'} response = self.client.post(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(response.json(), data) class ExecutorCreateTest(TestCase): def test_create_executor(self): url = reverse('ad_agency:executor-create') data = {'full_name': 'Polina Arhipova', 'phone_num': '89212420014'} response = self.client.post(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(response.json(), data) # UPDATE \u0437\u0430\u043f\u0440\u043e\u0441\u044b class ClientUpdateTest(TestCase): @classmethod def setUpTestData(cls): Client.objects.create( id=1, legal_entity='ITMO', contact_person='ITMO', phone_num='88005553535', email='itmo@itmo.ru', bank_details='5500745688881024') def test_update_client(self): url = reverse('ad_agency:client', args=['1']) data = { 'id': 1, 'legal_entity': 'ITMO', 'contact_person': 'ITMO', 'phone_num': '88005553535', 'email': 'itmo@itmo.ru', 'bank_details': '5500745688881024'} response_retrieve = self.client.get(url, format='json') self.assertEqual(response_retrieve.status_code, status.HTTP_200_OK) self.assertEqual(response_retrieve.json(), data) data['legal_entity'] = 'SPBSU' response_update = self.client.put(url, data, content_type='application/json') self.assertEqual(response_update.status_code, status.HTTP_200_OK) self.assertEqual(response_update.json(), data) class MaterialsPLUpdateTest(TestCase): @classmethod def setUpTestData(cls): MaterialsPL.objects.create( id=1, title='Craft Paper', description='Eco paper', price=250) def test_update_material(self): url = reverse('ad_agency:material', args=['1']) data = { 'id': 1, 'title': 'Craft Paper', 'description': 'Eco paper', 'price': '250'} response_retrieve = self.client.get(url, format='json') self.assertEqual(response_retrieve.status_code, status.HTTP_200_OK) self.assertEqual(response_retrieve.json(), data) data['price'] = '300' response_update = self.client.put(url, data, content_type='application/json') self.assertEqual(response_update.status_code, status.HTTP_200_OK) self.assertEqual(response_update.json(), data) class ExecutorUpdateTest(TestCase): @classmethod def setUpTestData(cls): Executor.objects.create( id=1, full_name='Filips Urnezhus', phone_num='89817623066') def test_update_executor(self): url = reverse('ad_agency:executor', args=['1']) data = { 'id': 1, 'full_name': 'Filips Urnezhus', 'phone_num': '89817623066'} response_retrieve = self.client.get(url, format='json') self.assertEqual(response_retrieve.status_code, status.HTTP_200_OK) self.assertEqual(response_retrieve.json(), data) data['phone_num'] = '37127901977' response_update = self.client.put(url, data, content_type='application/json') self.assertEqual(response_update.status_code, status.HTTP_200_OK) self.assertEqual(response_update.json(), data)","title":"3.1.1 Tests"},{"location":"labs/lab3/tests/#testspy","text":"from django.test import TestCase from django.urls import reverse from rest_framework import status from .models import * # Create your tests here. # \u0422\u0435\u0441\u0442 \u043c\u043e\u0434\u0435\u043b\u0438 API (3 \u0442\u0430\u0431\u043b\u0438\u0446\u044b) class ClientModelTest(TestCase): @classmethod def setUpTestData(cls): Client.objects.create( id=1, legal_entity='ITMO', contact_person='ITMO', phone_num='88005553535', email='itmo@itmo.ru', bank_details='5500745688881024') def test_client_label(self): client_test = Client.objects.get(id=1) field_label = client_test._meta.get_field('legal_entity').verbose_name self.assertEquals(field_label, '\u042e\u0440\u0438\u0434\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043b\u0438\u0446\u043e') class MaterialsPLModelTest(TestCase): @classmethod def setUpTestData(cls): MaterialsPL.objects.create( id=1, title='Craft Paper', description='Eco paper', price=250) def test_object_name_is_name(self): material = MaterialsPL.objects.get(id=1) expected_object_name = str(material.title) self.assertEquals(expected_object_name, str(material)) class ExecutorModelTest(TestCase): @classmethod def setUpTestData(cls): Executor.objects.create( id=1, full_name='Filips Urnezhus', phone_num='89817623066') def test_full_name_max_length(self): executor = Executor.objects.get(id=1) max_length = executor._meta.get_field('full_name').max_length self.assertEquals(max_length, 50) # \u0422\u0435\u0441\u0442 \u043c\u043e\u0434\u0435\u043b\u0438 API (3 GET \u0437\u0430\u043f\u0440\u043e\u0441\u0430, 3 POST \u0437\u0430\u043f\u0440\u043e\u0441\u0430, 3 PATCH \u0437\u0430\u043f\u0440\u043e\u0441\u0430) # GET \u0417\u0430\u043f\u0440\u043e\u0441\u044b class ClientGetTest(TestCase): @classmethod def setUpTestData(cls): Client.objects.create( id=1, legal_entity='ITMO', contact_person='ITMO', phone_num='88005553535', email='itmo@itmo.ru', bank_details='5500745688881024') def test_get_service(self): url = reverse('ad_agency:client', args=['1']) data = { 'id': 1, 'legal_entity': 'ITMO', 'contact_person': 'ITMO', 'phone_num': '88005553535', 'email': 'itmo@itmo.ru', 'bank_details': '5500745688881024'} response = self.client.get(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data) class MaterialsPLGetTest(TestCase): @classmethod def setUpTestData(cls): MaterialsPL.objects.create( id=1, title='Craft Paper', description='Eco paper', price=250) def test_get_material(self): url = reverse('ad_agency:material', args=['1']) data = { 'id': 1, 'title': 'Craft Paper', 'description': 'Eco paper', 'price': '250'} response = self.client.get(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data) class ExecutorGetTest(TestCase): @classmethod def setUpTestData(cls): Executor.objects.create( id=1, full_name='Filips Urnezhus', phone_num='89817623066') def test_get_executor(self): url = reverse('ad_agency:executor', args=['1']) data = { 'id': 1, 'full_name': 'Filips Urnezhus', 'phone_num': '89817623066'} response = self.client.get(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data) # POST \u0417\u0430\u043f\u0440\u043e\u0441\u044b class ClientCreateTest(TestCase): def test_create_client(self): url = reverse('ad_agency:client-create') data = {'legal_entity': 'Polytech', 'contact_person': 'Polina', 'phone_num': '88124503737', 'email': 'poly@polytech.ru', 'bank_details': '5512745688881024'} response = self.client.post(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(response.json(), data) class MaterialsPLCreateTest(TestCase): def test_create_material(self): url = reverse('ad_agency:material-create') data = {'title': 'Bargain Paper', 'description': 'Paper', 'price': '150'} response = self.client.post(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(response.json(), data) class ExecutorCreateTest(TestCase): def test_create_executor(self): url = reverse('ad_agency:executor-create') data = {'full_name': 'Polina Arhipova', 'phone_num': '89212420014'} response = self.client.post(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(response.json(), data) # UPDATE \u0437\u0430\u043f\u0440\u043e\u0441\u044b class ClientUpdateTest(TestCase): @classmethod def setUpTestData(cls): Client.objects.create( id=1, legal_entity='ITMO', contact_person='ITMO', phone_num='88005553535', email='itmo@itmo.ru', bank_details='5500745688881024') def test_update_client(self): url = reverse('ad_agency:client', args=['1']) data = { 'id': 1, 'legal_entity': 'ITMO', 'contact_person': 'ITMO', 'phone_num': '88005553535', 'email': 'itmo@itmo.ru', 'bank_details': '5500745688881024'} response_retrieve = self.client.get(url, format='json') self.assertEqual(response_retrieve.status_code, status.HTTP_200_OK) self.assertEqual(response_retrieve.json(), data) data['legal_entity'] = 'SPBSU' response_update = self.client.put(url, data, content_type='application/json') self.assertEqual(response_update.status_code, status.HTTP_200_OK) self.assertEqual(response_update.json(), data) class MaterialsPLUpdateTest(TestCase): @classmethod def setUpTestData(cls): MaterialsPL.objects.create( id=1, title='Craft Paper', description='Eco paper', price=250) def test_update_material(self): url = reverse('ad_agency:material', args=['1']) data = { 'id': 1, 'title': 'Craft Paper', 'description': 'Eco paper', 'price': '250'} response_retrieve = self.client.get(url, format='json') self.assertEqual(response_retrieve.status_code, status.HTTP_200_OK) self.assertEqual(response_retrieve.json(), data) data['price'] = '300' response_update = self.client.put(url, data, content_type='application/json') self.assertEqual(response_update.status_code, status.HTTP_200_OK) self.assertEqual(response_update.json(), data) class ExecutorUpdateTest(TestCase): @classmethod def setUpTestData(cls): Executor.objects.create( id=1, full_name='Filips Urnezhus', phone_num='89817623066') def test_update_executor(self): url = reverse('ad_agency:executor', args=['1']) data = { 'id': 1, 'full_name': 'Filips Urnezhus', 'phone_num': '89817623066'} response_retrieve = self.client.get(url, format='json') self.assertEqual(response_retrieve.status_code, status.HTTP_200_OK) self.assertEqual(response_retrieve.json(), data) data['phone_num'] = '37127901977' response_update = self.client.put(url, data, content_type='application/json') self.assertEqual(response_update.status_code, status.HTTP_200_OK) self.assertEqual(response_update.json(), data)","title":"tests.py"},{"location":"labs/lab4/filters_interface/","text":"","title":"4.1.1 Filters interface"}]}